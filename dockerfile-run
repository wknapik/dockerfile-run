#!/usr/bin/env bash
# Execute dockerfiles as scripts.

## FIXME: document in README and include in tests.
# Environment variables:
#
# DFR_CONTEXT: build context
#     default when reading from local file: <directory containing dockerfile>
#     default when reading from stdin or remote file: <current directory>
# DFR_QUIET: drop stdout from `docker build'
#     default: 1

# Fail on any error.
shopt -s inherit_errexit
set -eEo pipefail

# Fail with a message.
error() { echo "$*" >&2; exit 2; }

# Handle the command line argument for passing options to `docker run'.
# `--dfr "<docker run options>"' can be passed any number of times, from
# shebang, or on the command line, or both.
for ((i=1; i <= $#; ++i)); do
    if [[ "${*:$i:1}" != --dfr ]]; then
        args+=("${@:$i:1}")
    else # --dfr is at the current index, its argument is next.
        ((++i <= $#)) || error "The --dfr option requires an argument."
        read -ra dfr_arg <<<"${@:$i:1}"
        docker_run_opts_cmd+=("${dfr_arg[@]}")
    fi
done

# Do different things depending on the location of the Dockerfile (stdin,
# https(s), or local file).
case "${args[0],,}" in
    # For stdin and http(s), create a temporary Dockerfile. Build context is
    # $PWD, unless overridden.
    -|http://*|https://*)
       trap 'rm -f "$dockerfile_path"' EXIT
       dockerfile_path="$(umask 0177; mktemp --suffix=-stdin-or-remote)"
       if [[ "${args[0]}" == - ]]; then cat; else curl -fsSL "${args[0]}"; fi >"${dockerfile_path:?}"
       build_context="${DFR_CONTEXT:-"$PWD"}";;

    # For local Dockerfiles, build context is the directory containing the
    # Dockefile, unless overridden.
    *) dockerfile_path="$(realpath "${args[0]:?}")"
       build_context="${DFR_CONTEXT:-"$(dirname "$dockerfile_path")"}";;
esac

# Set command-line options for `docker run':
# * `--rm --init' are passed unconditionally
# * `-it' is passed when stdin refers to a terminal
# * additional options can be passwd via `--dfr "opt1 opt2"'.
docker_run_opts=(--rm --init "${docker_run_opts_cmd[@]}")
[[ ! -t 0 ]] || docker_run_opts+=(-it)

# Generate a build tag for the image.
dockerfile_path_sanitized="${dockerfile_path//[^[:alnum:]]/-}"
dockerfile_path_id="$(md5sum <<<"${dockerfile_path:?}"|cut -d' ' -f1)"
build_tag="dockerfilerun-${dockerfile_path_sanitized,,}-${dockerfile_path_id:?}"

# Discard stdout from `docker build', unless overridden.
# shellcheck disable=SC2015
[[ "${DFR_QUIET:-1}" == 1 ]] && exec 6>/dev/null || exec 6>&1

# Build the image.
docker build --label dockerfile-run -t "${build_tag:?}" -f "$dockerfile_path" "${build_context:?}" >&6

# Execute the supplied command, or the default CMD.
docker run "${docker_run_opts[@]}" "$build_tag" "${args[@]:1}"
